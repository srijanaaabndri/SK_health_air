})
})
# Perform prediction when the user clicks the "Predict Disease" button
observeEvent(input$predict, {
if (length(input$symptoms) > 0) {
# Use fallback data
real_time_data <- fetch_real_time_data(input$district)
# Create a feature vector for prediction, including symptoms count
features <- data.frame(
temperature = real_time_data$temperature,
humidity = real_time_data$humidity,
aqi = real_time_data$aqi,
symptoms_count = length(input$symptoms)  # Count the number of selected symptoms
)
# Rename columns to match the model's expected feature names
colnames(features) <- c("Temperature", "Humidity", "AQI", "symptoms_count")
# Predict the disease
tryCatch({
prediction <- predict(model, newdata = features, type = "prob")
# Get the maximum probability and associated disease
max_prob <- max(prediction)
disease <- colnames(prediction)[which.max(prediction)]
# Display prediction results
if (max_prob > 0.5) {
output$prediction_result <- renderText({
paste("Predicted Disease:", disease, "\nProbability:", round(max_prob * 100, 2), "%")
})
} else {
output$prediction_result <- renderText("No major risks detected. Please take care and monitor your health.")
}
}, error = function(e) {
# Handle errors and display message
output$prediction_result <- renderText(paste("An error occurred while making the prediction: ", e$message))
})
} else {
output$prediction_result <- renderText("Please select symptoms.")
}
})
}
# Run the app
shinyApp(ui, server)
# Load necessary libraries
library(caret)
library(randomForest)
# Step 1: Load the dataset
dataset <- read.csv("nepal_respiratory_disease_symptoms_data.csv")
# Step 2: Check the structure of the dataset to confirm data types
str(dataset)
# Step 3: Ensure `Disease_Type` is a factor (for classification)
dataset$Disease_Type <- as.factor(dataset$Disease_Type)
# Step 4: Handle missing values (if any)
dataset <- na.omit(dataset)  # Remove rows with missing values
# Step 5: Ensure each symptom column is binary (0 or 1)
symptom_columns <- c("Cough", "Wheezing", "Shortness_of_breath", "Chest_tightness",
"Trouble_in_sleeping", "Fever", "Sweating_and_chills", "Chest_pain",
"Difficulty_breathing", "Chronic_cough", "Fatigue", "Bleeding_cough",
"Weight_loss", "Loss_of_appetite", "Weakness", "Night_sweats",
"Eye_Change", "Hoarseness")
# Convert symptoms to 1 (present) or 0 (absent)
dataset[symptom_columns] <- lapply(dataset[symptom_columns], function(x) as.integer(x > 0))
# Step 6: Feature engineering (add symptoms count as a feature)
dataset$symptoms_count <- rowSums(dataset[symptom_columns])
# Step 7: Split the data into training and testing sets
set.seed(123)  # For reproducibility
train_index <- createDataPartition(dataset$Disease_Type, p = 0.8, list = FALSE)
train_data <- dataset[train_index, ]
test_data <- dataset[-train_index, ]
# Step 8: Train the Random Forest model for classification
model <- randomForest(Disease_Type ~ AQI + Temperature + Humidity + symptoms_count,
data = train_data, ntree = 100)
# Step 9: Save the trained model as an RDS file
saveRDS(model, "model.rds")
# Step 10: Evaluate the model on the test dataset
predictions <- predict(model, test_data)  # Generate predictions
confusion_matrix <- confusionMatrix(predictions, test_data$Disease_Type)  # Performance metrics
# Step 11: Print the confusion matrix to assess performance
print(confusion_matrix)
library(shiny)
library(randomForest)
# Load the trained model
model <- readRDS("model.rds")
# UI definition
ui <- fluidPage(
titlePanel("Respiratory Disease Prediction"),
sidebarLayout(
sidebarPanel(
selectInput(
"district",
"Select Your District:",
choices = c(
"Achham", "Arghakhanchi", "Baglung", "Baitadi", "Bajhang", "Bajura",
"Banke", "Bara", "Bardiya", "Bhaktapur", "Bhojpur", "Chitwan",
"Dadeldhura", "Dailekh", "Dang", "Darchula", "Dhading", "Dhankuta",
"Dhanusha", "Dolakha", "Dolpa", "Doti", "Gorkha", "Gulmi", "Humla",
"Ilam", "Jajarkot", "Jhapa", "Jumla", "Kailali", "Kalikot",
"Kanchanpur", "Kapilvastu", "Kaski", "Kathmandu", "Kavrepalanchok",
"Khotang", "Lalitpur", "Lamjung", "Mahottari", "Makawanpur",
"Manang", "Morang", "Mugu", "Mustang", "Myagdi", "Nawalpur",
"Nuwakot", "Okhaldhunga", "Palpa", "Panchthar", "Parasi", "Parbat",
"Parsa", "Pyuthan", "Ramechhap", "Rasuwa", "Rautahat", "Rolpa",
"Rukum", "Rupandehi", "Salyan", "Sankhuwasabha", "Saptari",
"Sarlahi", "Sindhuli", "Sindhupalchok", "Siraha", "Solukhumbu",
"Sunsari", "Surkhet", "Syangja", "Tanahun", "Taplejung", "Terhathum",
"Udayapur"
)
),
actionButton("fetch_data", "Fetch Real-Time Data"),
checkboxGroupInput(
"symptoms",
"Select Symptoms You Are Experiencing:",
choices = c("Cough", "Wheezing", "Shortness_of_breath", "Chest_tightness",
"Trouble_in_sleeping", "Fever", "Sweating_and_chills", "Chest_pain",
"Difficulty_breathing", "Chronic_cough", "Fatigue", "Bleeding_cough",
"Weight_loss", "Loss_of_appetite", "Weakness", "Night_sweats",
"Eye_Change", "Hoarseness")
),
actionButton("predict", "Predict Disease")
),
mainPanel(
verbatimTextOutput("real_time_data"),
verbatimTextOutput("prediction_result")
)
)
)
# Server definition
server <- function(input, output, session) {
# Fallback data for missing real-time API results
fallback_weather <- list(temperature = 25, humidity = 60)
fallback_pollutants <- list(aqi = 50)
# Display real-time data
observeEvent(input$fetch_data, {
output$real_time_data <- renderText({
paste("Temperature:", fallback_weather$temperature, "°C\n",
"Humidity:", fallback_weather$humidity, "%\n",
"AQI:", fallback_pollutants$aqi)
})
})
# Perform prediction when the user clicks the "Predict Disease" button
observeEvent(input$predict, {
if (length(input$symptoms) > 0) {
# Create a feature vector for prediction, including symptoms count
features <- data.frame(
temperature = fallback_weather$temperature,
humidity = fallback_weather$humidity,
aqi = fallback_pollutants$aqi,
symptoms_count = length(input$symptoms)  # Count the number of selected symptoms
)
# Rename columns to match the model's expected feature names
colnames(features) <- c("Temperature", "Humidity", "AQI", "symptoms_count")
# Debugging: Print column names of features and the model's expected columns
print("Features Data Frame:")
print(colnames(features))  # Check column names
print("Model's Expected Feature Names:")
print(names(model$forest$xlevels))  # Check the model's expected feature names
# Ensure the feature names match the model’s input
tryCatch({
prediction <- predict(model, newdata = features, type = "prob")
# Get the maximum probability and associated disease
max_prob <- max(prediction)
disease <- colnames(prediction)[which.max(prediction)]
# Display prediction results
if (max_prob > 0.45) {
output$prediction_result <- renderText({
paste("Predicted Disease based on the symptoms:", disease,"\nPlease consult the doctor soon.")
})
} else {
output$prediction_result <- renderText("No major risks detected. Please take care and monitor your health.")
}
}, error = function(e) {
# Handle errors and display message
output$prediction_result <- renderText(paste("An error occurred while making the prediction: ", e$message))
})
} else {
output$prediction_result <- renderText("Please select symptoms.")
}
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(randomForest)
# Load the trained model
model <- readRDS("model.rds")
# Fallback data (if real-time data cannot be fetched)
fallback_weather <- list(temperature = 25, humidity = 60)
fallback_pollutants <- list(aqi = 100)
# UI definition
ui <- fluidPage(
titlePanel("Respiratory Disease Prediction"),
sidebarLayout(
sidebarPanel(
selectInput(
"district",
"Select Your District:",
choices = c(
"Achham", "Arghakhanchi", "Baglung", "Baitadi", "Bajhang", "Bajura",
"Banke", "Bara", "Bardiya", "Bhaktapur", "Bhojpur", "Chitwan",
"Dadeldhura", "Dailekh", "Dang", "Darchula", "Dhading", "Dhankuta",
"Dhanusha", "Dolakha", "Dolpa", "Doti", "Gorkha", "Gulmi", "Humla",
"Ilam", "Jajarkot", "Jhapa", "Jumla", "Kailali", "Kalikot",
"Kanchanpur", "Kapilvastu", "Kaski", "Kathmandu", "Kavrepalanchok",
"Khotang", "Lalitpur", "Lamjung", "Mahottari", "Makawanpur",
"Manang", "Morang", "Mugu", "Mustang", "Myagdi", "Nawalpur",
"Nuwakot", "Okhaldhunga", "Palpa", "Panchthar", "Parasi", "Parbat",
"Parsa", "Pyuthan", "Ramechhap", "Rasuwa", "Rautahat", "Rolpa",
"Rukum", "Rupandehi", "Salyan", "Sankhuwasabha", "Saptari",
"Sarlahi", "Sindhuli", "Sindhupalchok", "Siraha", "Solukhumbu",
"Sunsari", "Surkhet", "Syangja", "Tanahun", "Taplejung", "Terhathum",
"Udayapur"
)
),
actionButton("fetch_data", "Fetch Real-Time Data"),
checkboxGroupInput(
"symptoms",
"Select Symptoms You Are Experiencing:",
choices = c("Cough", "Wheezing", "Shortness_of_breath", "Chest_tightness",
"Trouble_in_sleeping", "Fever", "Sweating_and_chills", "Chest_pain",
"Difficulty_breathing", "Chronic_cough", "Fatigue", "Bleeding_cough",
"Weight_loss", "Loss_of_appetite", "Weakness", "Night_sweats",
"Eye_Change", "Hoarseness")
),
actionButton("predict", "Predict Disease")
),
mainPanel(
verbatimTextOutput("real_time_data"),
verbatimTextOutput("prediction_result")
)
)
)
# Server definition
server <- function(input, output, session) {
# Function to fetch real-time data (replaced with fallback data)
fetch_real_time_data <- function(district) {
# Return fallback data (no real API calls)
return(list(temperature = fallback_weather$temperature,
humidity = fallback_weather$humidity,
aqi = fallback_pollutants$aqi))
}
# Display real-time data with loading feedback or fallback data
observeEvent(input$fetch_data, {
withProgress(message = "Fetching real-time data...", value = 0, {
real_time_data <- fetch_real_time_data(input$district)
# Show fallback data
output$real_time_data <- renderText({
paste("Failed to fetch real-time data. Using fallback values:\n",
"Temperature: ", real_time_data$temperature, "°C\n",
"Humidity: ", real_time_data$humidity, "%\n",
"AQI: ", real_time_data$aqi)
})
})
})
# Perform prediction when the user clicks the "Predict Disease" button
observeEvent(input$predict, {
if (length(input$symptoms) > 0) {
# Use fallback data
real_time_data <- fetch_real_time_data(input$district)
# Create a feature vector for prediction, including symptoms count
features <- data.frame(
temperature = real_time_data$temperature,
humidity = real_time_data$humidity,
aqi = real_time_data$aqi,
symptoms_count = length(input$symptoms)  # Count the number of selected symptoms
)
# Rename columns to match the model's expected feature names
colnames(features) <- c("Temperature", "Humidity", "AQI", "symptoms_count")
# Predict the disease
tryCatch({
prediction <- predict(model, newdata = features, type = "prob")
# Get the maximum probability and associated disease
max_prob <- max(prediction)
disease <- colnames(prediction)[which.max(prediction)]
# Display prediction results
if (max_prob > 0.5) {
output$prediction_result <- renderText({
paste("Predicted Disease:", disease, "\nProbability:", round(max_prob * 100, 2), "%")
})
} else {
output$prediction_result <- renderText("No major risks detected. Please take care and monitor your health.")
}
}, error = function(e) {
# Handle errors and display message
output$prediction_result <- renderText(paste("An error occurred while making the prediction: ", e$message))
})
} else {
output$prediction_result <- renderText("Please select symptoms.")
}
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(randomForest)
# Load the trained model
model <- readRDS("model.rds")
# Fallback data (if real-time data cannot be fetched)
fallback_weather <- list(temperature = 25, humidity = 60)
fallback_pollutants <- list(aqi = 100)
# UI definition
ui <- fluidPage(
titlePanel("Respiratory Disease Prediction"),
sidebarLayout(
sidebarPanel(
selectInput(
"district",
"Select Your District:",
choices = c(
"Achham", "Arghakhanchi", "Baglung", "Baitadi", "Bajhang", "Bajura",
"Banke", "Bara", "Bardiya", "Bhaktapur", "Bhojpur", "Chitwan",
"Dadeldhura", "Dailekh", "Dang", "Darchula", "Dhading", "Dhankuta",
"Dhanusha", "Dolakha", "Dolpa", "Doti", "Gorkha", "Gulmi", "Humla",
"Ilam", "Jajarkot", "Jhapa", "Jumla", "Kailali", "Kalikot",
"Kanchanpur", "Kapilvastu", "Kaski", "Kathmandu", "Kavrepalanchok",
"Khotang", "Lalitpur", "Lamjung", "Mahottari", "Makawanpur",
"Manang", "Morang", "Mugu", "Mustang", "Myagdi", "Nawalpur",
"Nuwakot", "Okhaldhunga", "Palpa", "Panchthar", "Parasi", "Parbat",
"Parsa", "Pyuthan", "Ramechhap", "Rasuwa", "Rautahat", "Rolpa",
"Rukum", "Rupandehi", "Salyan", "Sankhuwasabha", "Saptari",
"Sarlahi", "Sindhuli", "Sindhupalchok", "Siraha", "Solukhumbu",
"Sunsari", "Surkhet", "Syangja", "Tanahun", "Taplejung", "Terhathum",
"Udayapur"
)
),
actionButton("fetch_data", "Fetch Real-Time Data"),
checkboxGroupInput(
"symptoms",
"Select Symptoms You Are Experiencing:",
choices = c("Cough", "Wheezing", "Shortness_of_breath", "Chest_tightness",
"Trouble_in_sleeping", "Fever", "Sweating_and_chills", "Chest_pain",
"Difficulty_breathing", "Chronic_cough", "Fatigue", "Bleeding_cough",
"Weight_loss", "Loss_of_appetite", "Weakness", "Night_sweats",
"Eye_Change", "Hoarseness")
),
actionButton("predict", "Predict Disease")
),
mainPanel(
verbatimTextOutput("real_time_data"),
verbatimTextOutput("prediction_result")
)
)
)
# Server definition
server <- function(input, output, session) {
# Function to fetch real-time data (replaced with fallback data)
fetch_real_time_data <- function(district) {
# Return fallback data (no real API calls)
return(list(temperature = fallback_weather$temperature,
humidity = fallback_weather$humidity,
aqi = fallback_pollutants$aqi))
}
# Display real-time data with loading feedback or fallback data
observeEvent(input$fetch_data, {
withProgress(message = "Fetching real-time data...", value = 0, {
real_time_data <- fetch_real_time_data(input$district)
# Show fallback data
output$real_time_data <- renderText({
paste("Failed to fetch real-time data. Using fallback values:\n",
"Temperature: ", real_time_data$temperature, "°C\n",
"Humidity: ", real_time_data$humidity, "%\n",
"AQI: ", real_time_data$aqi)
})
})
})
# Perform prediction when the user clicks the "Predict Disease" button
observeEvent(input$predict, {
if (length(input$symptoms) > 0) {
# Use fallback data
real_time_data <- fetch_real_time_data(input$district)
# Create a feature vector for prediction, including symptoms count
features <- data.frame(
temperature = real_time_data$temperature,
humidity = real_time_data$humidity,
aqi = real_time_data$aqi,
symptoms_count = length(input$symptoms)  # Count the number of selected symptoms
)
# Rename columns to match the model's expected feature names
colnames(features) <- c("Temperature", "Humidity", "AQI", "symptoms_count")
# Predict the disease
tryCatch({
prediction <- predict(model, newdata = features, type = "prob")
# Get the maximum probability and associated disease
max_prob <- max(prediction)
disease <- colnames(prediction)[which.max(prediction)]
# Display prediction results
if (max_prob > 0.5) {
output$prediction_result <- renderText({
paste("Predicted Disease:", disease, "\nProbability:", round(max_prob * 100, 2), "%")
})
} else {
output$prediction_result <- renderText("No major risks detected. Please take care and monitor your health.")
}
}, error = function(e) {
# Handle errors and display message
output$prediction_result <- renderText(paste("An error occurred while making the prediction: ", e$message))
})
} else {
output$prediction_result <- renderText("Please select symptoms.")
}
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(randomForest)
# Load the trained model
model <- readRDS("model.rds")
# Fallback data (if real-time data cannot be fetched)
fallback_weather <- list(temperature = 25, humidity = 60)
fallback_pollutants <- list(aqi = 100)
# UI definition
ui <- fluidPage(
titlePanel("Respiratory Disease Prediction"),
sidebarLayout(
sidebarPanel(
selectInput(
"district",
"Select Your District:",
choices = c(
"Achham", "Arghakhanchi", "Baglung", "Baitadi", "Bajhang", "Bajura",
"Banke", "Bara", "Bardiya", "Bhaktapur", "Bhojpur", "Chitwan",
"Dadeldhura", "Dailekh", "Dang", "Darchula", "Dhading", "Dhankuta",
"Dhanusha", "Dolakha", "Dolpa", "Doti", "Gorkha", "Gulmi", "Humla",
"Ilam", "Jajarkot", "Jhapa", "Jumla", "Kailali", "Kalikot",
"Kanchanpur", "Kapilvastu", "Kaski", "Kathmandu", "Kavrepalanchok",
"Khotang", "Lalitpur", "Lamjung", "Mahottari", "Makawanpur",
"Manang", "Morang", "Mugu", "Mustang", "Myagdi", "Nawalpur",
"Nuwakot", "Okhaldhunga", "Palpa", "Panchthar", "Parasi", "Parbat",
"Parsa", "Pyuthan", "Ramechhap", "Rasuwa", "Rautahat", "Rolpa",
"Rukum", "Rupandehi", "Salyan", "Sankhuwasabha", "Saptari",
"Sarlahi", "Sindhuli", "Sindhupalchok", "Siraha", "Solukhumbu",
"Sunsari", "Surkhet", "Syangja", "Tanahun", "Taplejung", "Terhathum",
"Udayapur"
)
),
actionButton("fetch_data", "Fetch Real-Time Data"),
checkboxGroupInput(
"symptoms",
"Select Symptoms You Are Experiencing:",
choices = c("Cough", "Wheezing", "Shortness_of_breath", "Chest_tightness",
"Trouble_in_sleeping", "Fever", "Sweating_and_chills", "Chest_pain",
"Difficulty_breathing", "Chronic_cough", "Fatigue", "Bleeding_cough",
"Weight_loss", "Loss_of_appetite", "Weakness", "Night_sweats",
"Eye_Change", "Hoarseness")
),
actionButton("predict", "Predict Disease")
),
mainPanel(
verbatimTextOutput("real_time_data"),
verbatimTextOutput("prediction_result")
)
)
)
# Server definition
server <- function(input, output, session) {
# Function to fetch real-time data (replaced with fallback data)
fetch_real_time_data <- function(district) {
# Return fallback data (no real API calls)
return(list(temperature = fallback_weather$temperature,
humidity = fallback_weather$humidity,
aqi = fallback_pollutants$aqi))
}
# Display real-time data with loading feedback or fallback data
observeEvent(input$fetch_data, {
withProgress(message = "Fetching real-time data...", value = 0, {
real_time_data <- fetch_real_time_data(input$district)
# Show fallback data
output$real_time_data <- renderText({
paste("Failed to fetch real-time data. Using fallback values:\n",
"Temperature: ", real_time_data$temperature, "°C\n",
"Humidity: ", real_time_data$humidity, "%\n",
"AQI: ", real_time_data$aqi)
})
})
})
# Perform prediction when the user clicks the "Predict Disease" button
observeEvent(input$predict, {
if (length(input$symptoms) > 0) {
# Use fallback data
real_time_data <- fetch_real_time_data(input$district)
# Create a feature vector for prediction, including symptoms count
features <- data.frame(
temperature = real_time_data$temperature,
humidity = real_time_data$humidity,
aqi = real_time_data$aqi,
symptoms_count = length(input$symptoms)  # Count the number of selected symptoms
)
# Rename columns to match the model's expected feature names
colnames(features) <- c("Temperature", "Humidity", "AQI", "symptoms_count")
# Predict the disease
tryCatch({
prediction <- predict(model, newdata = features, type = "prob")
# Get the maximum probability and associated disease
max_prob <- max(prediction)
disease <- colnames(prediction)[which.max(prediction)]
# Display prediction results
if (max_prob > 0.45) {
output$prediction_result <- renderText({
paste("Predicted Disease:", disease, "\nProbability:", round(max_prob * 100, 2), "%")
})
} else {
output$prediction_result <- renderText("No major risks detected. Please take care and monitor your health.")
}
}, error = function(e) {
# Handle errors and display message
output$prediction_result <- renderText(paste("An error occurred while making the prediction: ", e$message))
})
} else {
output$prediction_result <- renderText("Please select symptoms.")
}
})
}
# Run the app
shinyApp(ui, server)
